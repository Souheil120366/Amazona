{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Amazona\\\\frontend\\\\src\\\\screens\\\\MapScreen.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from '../Store';\nimport Button from 'react-bootstrap/Button';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nconst libs = ['places'];\nexport default function MapScreen() {\n  _s();\n  //const requestUrl = \"https://www.skftechnologies.com:5000\";\n  const requestUrl = \"\";\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  const navigate = useNavigate();\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await axios(requestUrl + '/api/keys/google', {\n        headers: {\n          Authorization: `BEARER ${userInfo.token}`\n        }\n      });\n      setGoogleApiKey(data.key);\n      getUserCurrentLocation();\n    };\n    fetch();\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON'\n    });\n  }, [ctxDispatch, userInfo]);\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id\n      }\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-box\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      libraries: libs,\n      googleMapsApiKey: googleApiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        id: \"smaple-map\",\n        mapContainerStyle: {\n          height: '100%',\n          width: '100%'\n        },\n        center: center,\n        zoom: 15,\n        onLoad: onLoad,\n        onIdle: onIdle,\n        children: [/*#__PURE__*/_jsxDEV(StandaloneSearchBox, {\n          onLoad: onLoadPlaces,\n          onPlacesChanged: onPlacesChanged,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-input-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: onConfirm,\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onLoad: onMarkerLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(MapScreen, \"tH02IKR5jF0yL2d3j48WCjJosTQ=\", false, function () {\n  return [useNavigate];\n});\n_c = MapScreen;\nvar _c;\n$RefreshReg$(_c, \"MapScreen\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","useNavigate","Store","Button","toast","jsxDEV","_jsxDEV","defaultLocation","lat","lng","libs","MapScreen","_s","requestUrl","state","dispatch","ctxDispatch","userInfo","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","getUserCurrentLocation","navigator","geolocation","alert","getCurrentPosition","position","coords","latitude","longitude","fetch","data","headers","Authorization","token","key","type","onLoad","map","current","onIdle","onLoadPlaces","place","onPlacesChanged","getPlaces","geometry","onMarkerLoad","marker","onConfirm","places","payload","address","formatted_address","name","vicinity","googleAddressId","id","success","className","children","libraries","googleMapsApiKey","mapContainerStyle","height","width","zoom","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/Amazona/frontend/src/screens/MapScreen.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  LoadScript,\r\n  GoogleMap,\r\n  StandaloneSearchBox,\r\n  Marker,\r\n} from '@react-google-maps/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Store } from '../Store';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\r\nconst libs = ['places'];\r\n\r\nexport default function MapScreen() {\r\n  //const requestUrl = \"https://www.skftechnologies.com:5000\";\r\n  const requestUrl = \"\";\r\n  const { state, dispatch: ctxDispatch } = useContext(Store);\r\n  const { userInfo } = state;\r\n  const navigate = useNavigate();\r\n  const [googleApiKey, setGoogleApiKey] = useState('');\r\n  const [center, setCenter] = useState(defaultLocation);\r\n  const [location, setLocation] = useState(center);\r\n\r\n  const mapRef = useRef(null);\r\n  const placeRef = useRef(null);\r\n  const markerRef = useRef(null);\r\n\r\n  const getUserCurrentLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      alert('Geolocation os not supported by this browser');\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        setCenter({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n        setLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data } = await axios(requestUrl+'/api/keys/google', {\r\n        headers: { Authorization: `BEARER ${userInfo.token}` },\r\n      });\r\n      setGoogleApiKey(data.key);\r\n      getUserCurrentLocation();\r\n    };\r\n\r\n    fetch();\r\n    ctxDispatch({\r\n      type: 'SET_FULLBOX_ON',\r\n    });\r\n  }, [ctxDispatch,userInfo]);\r\n\r\n  const onLoad = (map) => {\r\n    mapRef.current = map;\r\n  };\r\n  const onIdle = () => {\r\n    setLocation({\r\n      lat: mapRef.current.center.lat(),\r\n      lng: mapRef.current.center.lng(),\r\n    });\r\n  };\r\n\r\n  const onLoadPlaces = (place) => {\r\n    placeRef.current = place;\r\n  };\r\n  const onPlacesChanged = () => {\r\n    const place = placeRef.current.getPlaces()[0].geometry.location;\r\n    setCenter({ lat: place.lat(), lng: place.lng() });\r\n    setLocation({ lat: place.lat(), lng: place.lng() });\r\n  };\r\n\r\n  const onMarkerLoad = (marker) => {\r\n    markerRef.current = marker;\r\n  };\r\n\r\n  const onConfirm = () => {\r\n    const places = placeRef.current.getPlaces() || [{}];\r\n    ctxDispatch({\r\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\r\n      payload: {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        address: places[0].formatted_address,\r\n        name: places[0].name,\r\n        vicinity: places[0].vicinity,\r\n        googleAddressId: places[0].id,\r\n      },\r\n    });\r\n    toast.success('location selected successfully.');\r\n    navigate('/shipping');\r\n  };\r\n  return (\r\n    <div className=\"full-box\">\r\n      \r\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\r\n        <GoogleMap\r\n          id=\"smaple-map\"\r\n          mapContainerStyle={{ height: '100%', width: '100%' }}\r\n          center={center}\r\n          zoom={15}\r\n          onLoad={onLoad}\r\n          onIdle={onIdle}\r\n        >\r\n          <StandaloneSearchBox\r\n            onLoad={onLoadPlaces}\r\n            onPlacesChanged={onPlacesChanged}\r\n          >\r\n            <div className=\"map-input-box\">\r\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\r\n              <Button type=\"button\" onClick={onConfirm}>\r\n                Confirm\r\n              </Button>\r\n            </div>\r\n          </StandaloneSearchBox>\r\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}